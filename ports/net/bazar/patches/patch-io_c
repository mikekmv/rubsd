$RuOBSD$
--- io.c.orig	Mon Jul 30 11:50:02 2001
+++ io.c	Mon Jul 30 11:50:03 2001
@@ -54,6 +54,8 @@ static char rcsid[] = "$OpenBSD: io.c,v 
 #include <errno.h>
 #include <unistd.h>
 
+#include "charset.h"
+
 #define A_LONG_TIME 10000000
 
 /*
@@ -64,7 +66,7 @@ talk()
 {
 	fd_set read_template, read_set;
 	int nb;
-	char buf[BUFSIZ];
+	char buf[BUFSIZ], obuf[BUFSIZ];
 	struct timeval wait;
 
 #if defined(NCURSES_VERSION) || defined(beep)
@@ -98,22 +100,36 @@ talk()
 			quit("Unexpected error from select", 1);
 		}
 		if (FD_ISSET(sockt, &read_set)) {
+			char *ibuf;
+
 			/* There is data on sockt */
-			nb = read(sockt, buf, sizeof buf);
+			nb = read(sockt, ibuf = buf, sizeof buf);
 			if (nb <= 0)
 				quit("Connection closed.  Exiting", 0);
-			display(&his_win, buf, nb);
+			do {
+				int count;
+
+				count = rtol(&ibuf, obuf, &nb, sizeof(obuf));
+				display(&his_win, obuf, count);
+			} while (nb > 0);
 		}
 		if (FD_ISSET(fileno(stdin), &read_set)) {
+			char *ibuf;
+
 			/*
 			 * We can't make the tty non_blocking, because
 			 * curses's output routines would screw up
 			 */
 			ioctl(0, FIONREAD, &nb);
-			nb = read(0, buf, nb);
+			nb = read(0, ibuf = buf, nb);
 			display(&my_win, buf, nb);
-			/* might lose data here because sockt is non-blocking */
-			write(sockt, buf, nb);
+			do {
+				int count;
+
+				count = ltor(&ibuf, obuf, &nb, sizeof(obuf));
+				/* might lose data here because sockt is non-blocking */
+				write(sockt, obuf, count);
+			} while (nb > 0);
 		}
 	}
 }
