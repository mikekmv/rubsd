НАФИГ ЭТО НУЖНО

Программа tunneld предназначена для создания IP tunnel между двумя
хостами/сетями, физически находящимися в разных сетях. Возможна легкая
(очень легкая) :) шифрация данных и трансляция адресов. На данный момент
программа поддерживает OpenBSD, FreeBSD и NetBSD (тестированно только под
OpenBSD), но легко может быть спортирована в другие системы со схожим
tun интерфейсом.


ЗАПУСК

    tunneld [-dEmNsuv] [-b src] [-p proto] [-t tun] dst [local remote [mask]]

    dst			- адрес хоста, с которым устанавливается туннель
    local remote	- локальный и удаленный адрес, назначаемые tun
			  интерфейсу (если адреса не указаны, подразумевается,
			  что они будут установленны позже командой ifconfig)
    mask		- маска интерфейса (по умолчанию 255.255.255.255)
    -b src		- выполнить привязку к адресу src (по умолчанию
			  производится привязка ко всем адресам хоста)
    -p proto		- использовать протокол proto (допустимые значения -
			  ipip (4), ipencap (94) и encap (98); по умолчанию
			  используется encap)
    -t tun		- принудительно указать tun интерфейс (по умолчанию
			  используется первый свободный интерфейс)
    -v			- отладочный режим; программа не отцепляется от
			  терминала и все сообщения, предназначенные для
			  syslog, дублируются в stderr

    Шифрование информации (требует -DCRYPT при компиляции)
    -E			- очень сильное криптование (xor 0xa5) ;)

    Трансляция адресов (требует -DNAT при компиляции)
    -N			- включить трансляцию адресов для исходящих
			  пакетов (требуется явное указание адресов для
			  tun интерфейся)
    -d			- блокировать входящие пакеты, для которых нет
			  соответствующего транслируемого адреса
    -m			- по возможности, устанавливать исходный номер порта
			  таким же как и до трансляции (рекомендуется для
			  RPC и LPD)
    -s			- использовать socket'ы (рекомендуется для FTP и IRC)
    -u			- транслировать только приватные (RFC 1918) сети

После успешного запуска программы, в каталоге /var/run создается PID файл
tunneld-tunN.pid, где tunN - имя интерфейса, используемого программой.
В отладочном режиме (-v) PID файл не создается.


ПРИМЕРЫ

(192.168.1.0/24) - A: 1.2.3.4 <-> B: 5.6.7.8 - (192.168.2.0/24)

	A# tunneld 5.6.7.8 192.168.1.1 192.168.2.1
	A# route add -net 192.168.2.0/24 192.168.2.1

	B# tunneld 1.2.3.4 192.168.2.1 192.168.1.1
	B# route add -net 192.168.1.0/24 192.168.1.1

(192.168.1.0/24) - A: 1.2.3.4 <-> B: 5.6.7.8 - интернет (NAT)
default: 1.2.3.1		  (5.6.7.9 и 5.6.7.10 используем
				  для тунеля)

	A# tunneld -Nmus 5.6.7.8 5.6.7.10 5.6.7.9
	A# route add -host 5.6.7.8 1.2.3.1
	A# route change default 5.6.7.9

	B# tunneld 1.2.3.4 5.6.7.9 5.6.7.10


ПРИМЕЧАНИЯ

Программа не поддерживает IPv6.

Адреса (src, dst, local и remote) могут быть указаны как имя хоста,
однако следует соблюдать осторожность, так как можно получить совсем
не то, что хотелось. Пример: имя blah.blah.com имеет два IP адреса
1.1.1.1 и 2.2.2.2. Если для выхода во внешнюю сеть (или по крайней
мере в сторону хоста, с которым устанавливается тунель) используется
1.1.1.1, а при ресолвинге blah.blah.com был получен адрес 2.2.2.2,
тунель не будет работать.

Перед перенаправлением default в тунель, необходимо создать маршрут
до хоста, с которым устанавливается тунель.

Если не использовать ключ -E, программа совместима с KAME gif interface и
linux tunnel (-p 4), Cisco NOS и FreeBSD nos-tun (-p 94) и еще хрен
знает с чем (-p 98, по умолчанию) :)

При использовании новых BSD систем (в которые интегрировали KAME IPv6),
программа может подраться с кернелом при использовании протоколов,
отличных от encap (не проверял) :)

Несколько туннелей между двумя хостами могут быть установлены только
при использовании разных протоколов для каждого из них (интересно, такое
вообще когда-нибудь может потребоваться?) :)

Не следует использовать данную программу для построения VPN, в которых
важна защита информации ;)

---
Oleg Safiullin <form@openbsd.ru>

$RuOBSD: README,v 1.2 2001/11/15 03:57:56 form Exp $
