$RuOBSD: README,v 1.5 2004/10/31 06:51:26 form Exp $
--------------------------------- цут хере -----------------------------------

Че за хрень
~~~~~~~~~~~

Этакая считалка трафика, расчитанная на использование PF. Весь учет происходит
на уровне ядра,  в  любой  момент  данные можно обработать из пользовательской
программы.


Сборка
~~~~~~

$ make depend && make && sudo make install
	(если требуется поддержка BPF (например чтобы посмотреть tcpdumpом на
	acct интерфейсы) следует использовать команду make USE_BPF=Yes
	[кернел должен быть собран с pseudo-device bpfilter])


Запуск
~~~~~~

# modload /usr/lkm/if_acct.o
	(при securelevel < 1)

# ifconfig acct0 up
	(можно включить несколько интерфейсов, создаются автоматом)


Правила PF
~~~~~~~~~~

pass in  on sk0 dup-to acct0
pass out on sk0 dup-to acct0

При написании правил следует  учитывать  что  правила  в  PF  срабатывают  по
последнему совпадению (если не указана опция quick).  Например  в приведенном
ниже случае входящие TCP пакеты считаться не будут:

pass in on sk0 dup-to acct0 all
pass in on sk0 proto tcp all


Убогий просмотр
~~~~~~~~~~~~~~~

acctstat [-rw] [-i interface]
	-r		- после снятия статистики обнулить статистику
	-w		- широкий формат вывода
	-i interface	- использовать interface вместо acct0

Программа распечатывает статистику. Формат распечатки:

Обычный:	yyyy-mm-dd hh:mm yyyy-mm-dd hh:mm src dst octets
Широкий:	yyyy-mm-dd hh:mm:ss yyyy-mm-dd hh:mm:ss src dst pkts octets

Где дата и время соответствуют первому и последнему пакету в потоке.


Человечий просмотр
~~~~~~~~~~~~~~~~~~

acctshow [-r] [-i interface] [-o sortmode] [-s seconds]
	-r		- задает обратный порядок сортировки для -o
	-i interface	- использовать interface вместо acct0
	-o sortmode	- задает порядок сортировки (none, last, src, dst,
			  pkts, octets)
	-s seconds	- интервал обновления экрана (по умолчанию 1 секунда)

Программа в экранном режиме отображает статистику.  При  просмотре информации
можно использовать клавиши стрелок вверх/вниз, PgUp/PgDn и Home/End. Выход из
программы - Ctrl/C. Ctrl/L, Ctrl/R и Ctrl/W перерисоввывают экран.

Сортировка вывода:
	none		- не сортировать
	last		- по времени последнего пакета в потоке
	src		- по адресу источника
	dst		- по адресу приемника
	pkts		- по числу пакетов в потоке
	octets		- по числу байт в потоке

Если сортировка не указана, по умолчанию используется -r -o last.


Програминг
~~~~~~~~~~

Програминг acct интерфейсов вфглядит примерно так:


#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>

#include <net/if.h>
#include <net/if_acct.h>

#include <err.h>
#include <string.h>


...
{
	struct acct_flow af[ACCTFLOWS];
	struct acctio_flows aif = { af, ACCTFLOWS };
	struct ifreq ifr;
	int s;

	if ((s = socket(PF_INET, SOCK_DGRAM, 0)) < 0)
		err(1, "socket");

	bzero(&ifr, sizeof(ifr));
	(void)strlcpy(ifr.ifr_name, interface, sizeof(ifr.ifr_name));
	ifr.ifr_data = (caddr_t)&aif;

	if (ioctl(s, SIOCGRFLOWS, &ifr) < 0)
		err(1, "ioctl");

	...
}
...


Поддерживаются следующие ioctl (определены в файле include/net/if_acct.h):

ioctl(int s, SIOCRFLOWS)
	- Сброс  статистики.  Статистика  также  сбрасывается  при  отключении
	  интерфейса (ifconfig acctN down).

ioctl(int s, SIOCGFLOWS, struct ifreq *ifr)
	- Получение  статистики.  При  этом  поле  ifr_name  должно  содержать
	  имя интерфейса,  поле  ifr_data ссылаться на структуру acctio_flows,
	  в  которой  поле  aif_flows  должно  ссылаться  на  массив  структур
	  acct_flow, а поле aif_nflows содержать размер массива  (в структурах
	  acct_flow). После успешного выполнения массив будет содержать записи
	  статистики, а поле aif_nflows - число записей.

ioctl(int s, SIOCGRFLOWS, struct ifreq *ifr)
	- Аналогично SIOCGFLOWS с  одновременным  выполнением SIOCRFLOWS после
	  успешного завершения.

Программа должна иметь права root.

struct acct_flow {
	in_addr_t		af_src;		/* адрес источника */
	in_addr_t		af_dst;		/* адрес приемника */
	time_t			af_first;	/* время первого пакета */
	time_t			af_last;	/* время последнего пакета */
	u_int32_t		af_pkts;	/* общее число пакетов */
	u_int32_t		af_octets;	/* число переданных байт */
};

struct acctio_flows {
	struct acct_flow	*aif_flows;
	int			aif_nflows;
};

-------------------------------- и хере цут ----------------------------------
ЦОПЫРИГХТ (Ц) 2004 ОЛЕГ САФИУЛЛИН <ФОРМЮПДП-11.ОРГ.РУ>
АЛЛ РИГХТС РЕСЕРЖЕД.

РЕДИСТРИБУТИОН  АНД  УСЕ  ИН  СОУРЦЕ  АНД  БИНАРЫ  ФОРМС,  ВИТХ ОР ВИТХОУТ
МОДИФИЦАТИОН,  АРЕ  ПЕРМИТТЕД  ПРОЖИДЕД  ТХАТ  ТХЕ  ФОЛЛОВИНГ   ЦОНДИТИОНС
АРЕ МЕТ:
1. РЕДИСТРИБУТИОНС  ОФ  СОУРЦЕ ЦОДЕ МУСТ РЕТАИН ТХЕ АБОЖЕ ЦОПЫРИГХТ НОТИЦЕ
   УНМОДИФИЕД, ТХИС ЛИСТ ОФ ЦОНДИТИОНС, АНД ТХЕ ФОЛЛОВИНГ ДИСЦЛАИМЕР.
2. РЕДИСТРИБУТИОНС  ИН  БИНАРЫ  ФОРМ  МУСТ  РЕПРОДУЦЕ  ТХЕ АБОЖЕ ЦОПЫРИГХТ
   НОТИЦЕ,  ТХИС  ЛИСТ  ОФ  ЦОНДИТИОНС АНД ТХЕ ФОЛЛОВИНГ ДИСЦЛАИМЕР ИН ТХЕ
   ДОЦУМЕНТАТИОН АНД/ОР ОТХЕР МАТЕРИАЛС ПРОЖИДЕД ВИТХ ТХЕ ДИСТРИБУТИОН.

ТХИС СОФТВАРЕ ИС ПРОЖИДЕД БЫ ТХЕ АУТХОР АНД ЦОНТРИБУТОРС ``АС ИС'' АНД АНЫ
ЕЬПРЕСС  ОР ИМПЛИЕД ВАРРАНТИЕС, ИНЦЛУДИНГ, БУТ НОТ ЛИМИТЕД ТО, ТХЕ ИМПЛИЕД
ВАРРАНТИЕС  ОФ  МЕРЦХАНТАБИЛИТЫ  АНД  ФИТНЕСС ФОР А ПАРТИЦУЛАР ПУРПОСЕ АРЕ
ДИСЦЛАИМЕД. ИН НО ЕЖЕНТ СХАЛЛ ТХЕ АУТХОР ОР ЦОНТРИБУТОРС БЕ ЛИАБЛЕ ФОР АНЫ
ДИРЕЦТ, ИНДИРЕЦТ, ИНЦИДЕНТАЛ, СПЕЦИАЛ, ЕЬЕМПЛАРЫ, ОР ЦОНСЕЯУЕНТИАЛ ДАМАГЕС
(ИНЦЛУДИНГ,  БУТ  НОТ  ЛИМИТЕД  ТО,  ПРОЦУРЕМЕНТ  ОФ  СУБСТИТУТЕ  ГООДС ОР
СЕРЖИЦЕС; ЛОСС ОФ УСЕ, ДАТА, ОР ПРОФИТС; ОР БУСИНЕСС ИНТЕРРУПТИОН) ХОВЕЖЕР
ЦАУСЕД  АНД  ОН  АНЫ  ТХЕОРЫ  ОФ  ЛИАБИЛИТЫ,  ВХЕТХЕР  ИН ЦОНТРАЦТ, СТРИЦТ
ЛИАБИЛИТЫ,  ОР ТОРТ (ИНЦЛУДИНГ НЕГЛИГЕНЦЕ ОР ОТХЕРВИСЕ) АРИСИНГ ИН АНЫ ВАЫ
ОУТ  ОФ  ТХЕ  УСЕ  ОФ ТХИС СОФТВАРЕ, ЕЖЕН ИФ АДЖИСЕД ОФ ТХЕ ПОССИБИЛИТЫ ОФ
СУЦХ ДАМАГЕ.
