Usage:
        cd /usr/src/sys
        patch -p0 < obsd45.patch

Index: altq/altq_classq.h
===================================================================
RCS file: /cvs/src/sys/altq/altq_classq.h,v
retrieving revision 1.4
diff -u -r1.4 altq_classq.h
--- altq/altq_classq.h	20 Apr 2008 07:05:51 -0000	1.4
+++ altq/altq_classq.h	26 Jan 2010 08:03:18 -0000
@@ -79,6 +79,7 @@
 #if !defined(__GNUC__) || defined(ALTQ_DEBUG)
 
 extern void		_addq(class_queue_t *, struct mbuf *);
+extern void		_insq(class_queue_t *, struct mbuf *, struct mbuf *);
 extern struct mbuf	*_getq(class_queue_t *);
 extern struct mbuf	*_getq_tail(class_queue_t *);
 extern struct mbuf	*_getq_random(class_queue_t *);
@@ -101,6 +102,24 @@
 	m0->m_nextpkt = m;
 	qtail(q) = m;
 	qlen(q)++;
+}
+
+/* insert packet after pointed one, or on head if NULL*/
+static __inline void
+_insq(class_queue_t *q, struct mbuf *m, struct mbuf *memb)
+{
+		if (memb != NULL) {
+			m->m_nextpkt = memb->m_nextpkt;
+			memb->m_nextpkt = m;
+                        if (qtail(q) == memb) qtail(q) = m;    // relink new tail
+		} else {
+			if (qtail(q) != NULL)
+				m->m_nextpkt = qtail(q)->m_nextpkt;
+			else
+				qtail(q) = m;
+			qtail(q)->m_nextpkt = m;
+		}
+		qlen(q)++;
 }
 
 static __inline struct mbuf *
Index: altq/altq_red.c
===================================================================
RCS file: /cvs/src/sys/altq/altq_red.c,v
retrieving revision 1.16
diff -u -r1.16 altq_red.c
--- altq/altq_red.c	8 May 2008 15:22:02 -0000	1.16
+++ altq/altq_red.c	26 Jan 2010 08:03:18 -0000
@@ -230,9 +230,6 @@
 	rp->red_probd = (2 * (rp->red_thmax - rp->red_thmin)
 			 * rp->red_inv_pmax) << FP_SHIFT;
 
-	/* allocate weight table */
-	rp->red_wtab = wtab_alloc(rp->red_weight);
-
 	microtime(&rp->red_last);
 	return (rp);
 }
@@ -240,10 +237,10 @@
 void
 red_destroy(red_t *rp)
 {
-	wtab_destroy(rp->red_wtab);
 	free(rp, M_DEVBUF);
 }
 
+
 void
 red_getstats(red_t *rp, struct redstats *sp)
 {
@@ -255,239 +252,179 @@
 	sp->marked_packets	= rp->red_stats.marked_packets;
 }
 
-int
-red_addq(red_t *rp, class_queue_t *q, struct mbuf *m,
-    struct altq_pktattr *pktattr)
+#define MHASH_STUB     0x0100007fu  /* (127.0.0.1) */
+
+/*
+ *  Count packet's destination (or source) address hash
+ *  TODOs: 
+ *    > hash ipv6 addresses
+ */
+
+u_int
+hps_pkt_hash(struct mbuf *m, struct altq_pktattr *pktattr, int flags)
 {
-	int avg, droptype;
-	int n;
+        struct mbuf     *m0;
+        struct ip       *hdr;
 
-	avg = rp->red_avg;
+        hdr = (struct ip *)m->m_pkthdr.pf.hdr;
 
-	/*
-	 * if we were idle, we pretend that n packets arrived during
-	 * the idle period.
-	 */
-	if (rp->red_idle) {
-		struct timeval now;
-		int t;
-
-		rp->red_idle = 0;
-		microtime(&now);
-		t = (now.tv_sec - rp->red_last.tv_sec);
-		if (t > 60) {
-			/*
-			 * being idle for more than 1 minute, set avg to zero.
-			 * this prevents t from overflow.
-			 */
-			avg = 0;
-		} else {
-			t = t * 1000000 + (now.tv_usec - rp->red_last.tv_usec);
-			n = t / rp->red_pkttime - 1;
+        /* verify that hdr is within the mbuf data */
+        for (m0 = m; m0 != NULL; m0 = m0->m_next)
+                if (((caddr_t)(hdr) >= m0->m_data) &&
+                    ((caddr_t)(hdr) < m0->m_data + m0->m_len))
+                        break;
+        if (m0 == NULL) {
+                /* ick, tag info is stale */
+                return (MHASH_STUB);
+        }
+
+        switch (hdr->ip_v) {
+	case 4:	
+
+	/* STUB: just return v4 address as hash */
+		if (flags & REDF_ECN)
+			return hdr->ip_src.s_addr;
+		else
+			return hdr->ip_dst.s_addr;
+	/* TODO: v6 hash */
 
-			/* the following line does (avg = (1 - Wq)^n * avg) */
-			if (n > 0)
-				avg = (avg >> FP_SHIFT) *
-				    pow_w(rp->red_wtab, n);
-		}
 	}
 
-	/* run estimator. (note: avg is scaled by WEIGHT in fixed-point) */
-	avg += (qlen(q) << FP_SHIFT) - (avg >> rp->red_wshift);
-	rp->red_avg = avg;		/* save the new value */
-
-	/*
-	 * red_count keeps a tally of arriving traffic that has not
-	 * been dropped.
-	 */
-	rp->red_count++;
-
-	/* see if we drop early */
-	droptype = DTYPE_NODROP;
-	if (avg >= rp->red_thmin_s && qlen(q) > 1) {
-		if (avg >= rp->red_thmax_s) {
-			/* avg >= th_max: forced drop */
-			droptype = DTYPE_FORCED;
-		} else if (rp->red_old == 0) {
-			/* first exceeds th_min */
-			rp->red_count = 1;
-			rp->red_old = 1;
-		} else if (drop_early((avg - rp->red_thmin_s) >> rp->red_wshift,
-				      rp->red_probd, rp->red_count)) {
-			/* mark or drop by red */
-			if ((rp->red_flags & REDF_ECN) &&
-			    mark_ecn(m, pktattr, rp->red_flags)) {
-				/* successfully marked.  do not drop. */
-				rp->red_count = 0;
-#ifdef RED_STATS
-				rp->red_stats.marked_packets++;
-#endif
-			} else {
-				/* unforced drop by red */
-				droptype = DTYPE_EARLY;
-			}
-		}
-	} else {
-		/* avg < th_min */
-		rp->red_old = 0;
-	}
+/* else - return STUB hash */
+        return MHASH_STUB;	
+}
 
-	/*
-	 * if the queue length hits the hard limit, it's a forced drop.
-	 */
-	if (droptype == DTYPE_NODROP && qlen(q) >= qlimit(q))
-		droptype = DTYPE_FORCED;
-
-#ifdef RED_RANDOM_DROP
-	/* if successful or forced drop, enqueue this packet. */
-	if (droptype != DTYPE_EARLY)
-		_addq(q, m);
+/*
+ *  Get packet's pre-cached hash
+ */
+
+#if 1
+#define pkt_hash(m)  ((m)->m_pkthdr.pf.qid)
 #else
-	/* if successful, enqueue this packet. */
-	if (droptype == DTYPE_NODROP)
-		_addq(q, m);
-#endif
-	if (droptype != DTYPE_NODROP) {
-		if (droptype == DTYPE_EARLY) {
-			/* drop the incoming packet */
-#ifdef RED_STATS
-			rp->red_stats.drop_unforced++;
-#endif
-		} else {
-			/* forced drop, select a victim packet in the queue. */
-#ifdef RED_RANDOM_DROP
-			m = _getq_random(q);
-#endif
-#ifdef RED_STATS
-			rp->red_stats.drop_forced++;
-#endif
-		}
-#ifdef RED_STATS
-		PKTCNTR_ADD(&rp->red_stats.drop_cnt, m_pktlen(m));
+#define pkt_hash(m)  (hps_pkt_hash(m, pktattr, rp->red_flags))
 #endif
-		rp->red_count = 0;
-		m_freem(m);
-		return (-1);
-	}
-	/* successfully queued */
-#ifdef RED_STATS
-	PKTCNTR_ADD(&rp->red_stats.xmit_cnt, m_pktlen(m));
-#endif
-	return (0);
-}
 
 /*
- * early-drop probability is calculated as follows:
- *   prob = p_max * (avg - th_min) / (th_max - th_min)
- *   prob_a = prob / (2 - count*prob)
- *	    = (avg-th_min) / (2*(th_max-th_min)*inv_p_max - count*(avg-th_min))
- * here prob_a increases as successive undrop count increases.
- * (prob_a starts from prob/2, becomes prob when (count == (1 / prob)),
- * becomes 1 when (count >= (2 / prob))).
+ *  Enqueue new packet
  */
+
 int
-drop_early(int fp_len, int fp_probd, int count)
+red_addq(red_t *rp, class_queue_t *q, struct mbuf *m,
+    struct altq_pktattr *pktattr)
 {
-	int	d;		/* denominator of drop-probability */
+        struct    mbuf *m0;  /* tail or head storage */
+
+        struct    mbuf *mi;  /* queue walk index   */
+        struct    mbuf *mp;  /* previous index     */
+        struct    mbuf *mc;  /* candidate item     */
+
+        u_int     mhash;     /* new packet hash    */
+        u_int     ihash;     /* indexed item hash  */
+        u_int     phash = 0; /* previous item hash */
+
+        int       qpkts;     /* number of packets (w/ same hash) */
+	int       fhead;
+
+        int       n;
 
-	d = fp_probd - count * fp_len;
-	if (d <= 0)
-		/* count exceeds the hard limit: drop or mark */
-		return (1);
-
-	/*
-	 * now the range of d is [1..600] in fixed-point. (when
-	 * th_max-th_min=10 and p_max=1/30)
-	 * drop probability = (avg - TH_MIN) / d
-	 */
-
-	if (arc4random_uniform(d) < fp_len) {
-		/* drop or mark */
-		return (1);
+/* count & cache packet hash (hope, qiq is unneeded anymore) */
+	mhash = hps_pkt_hash(m, pktattr, rp->red_flags);
+	m->m_pkthdr.pf.qid = mhash;
+
+#ifdef HPS_DEBUG
+	printf("hash=%x\n", mhash);
+#endif
+
+/* shortcut - abort on (global) queue overflow */
+	if (qlen(q) >= qlimit(q)) {
+		m_freem(m);
+		return (-1);
 	}
-	/* no drop/mark */
-	return (0);
-}
 
-/*
- * try to mark CE bit to the packet.
- *    returns 1 if successfully marked, 0 otherwise.
+/* shortcut - just add if queue is empty */
+        if ((m0 = qtail(q)) == NULL) {
+		_addq(q, m);
+		return 0;
+        }
+
+/* 
+ * walk thru queue, in order to:
+ * > find a place for new packet
+ * > count same-hashed packets to emulate personal overflow
+ * > (not yet) count number of active hosts
+ *
  */
-int
-mark_ecn(struct mbuf *m, struct altq_pktattr *pktattr, int flags)
-{
-	struct mbuf	*m0;
-	void		*hdr;
 
-	hdr = m->m_pkthdr.pf.hdr;
+/* prepare to walk */
 
-	/* verify that pattr_hdr is within the mbuf data */
-	for (m0 = m; m0 != NULL; m0 = m0->m_next)
-		if (((caddr_t)(hdr) >= m0->m_data) &&
-		    ((caddr_t)(hdr) < m0->m_data + m0->m_len))
-			break;
-	if (m0 == NULL) {
-		/* ick, tag info is stale */
-		return (0);
-	}
+        mi = m0;              /* current item ptr (set to tail)   */
+        mp = NULL;            /* previous item (NULL = n/a)       */
+        mc = m;               /* place candidate (self - none, NULL - head) */
+        m0  = m0->m_nextpkt;  /* store head ptr (as loop marker)  */
+        qpkts  = 0;           /* number of packets with same hash */
+        fhead  = 0;           /* can put packet on head           */
+
+/* do walk thru queue */
+        do {
+	/* store previous */
+		if (mi->m_nextpkt != m0) {
+			mp    = mi;
+			phash = ihash;
+		}
+	/* set on next (or first) item */
+		mi    = mi->m_nextpkt;
+		ihash = pkt_hash(mi);
+
+	/* hash is equal - skip, count */
+		if (ihash == mhash) {
+			qpkts++;  // count packets
+			continue;
+                }
 
-	switch (((struct ip *)hdr)->ip_v) {
-	case 4:
-		if (flags & REDF_ECN4) {
-			struct ip *ip = hdr;
-			u_int8_t otos;
-			int sum;
-
-			if ((ip->ip_tos & IPTOS_ECN_MASK) == IPTOS_ECN_NOTECT)
-				return (0);	/* not-ECT */
-			if ((ip->ip_tos & IPTOS_ECN_MASK) == IPTOS_ECN_CE)
-				return (1);	/* already marked */
-
-			/*
-			 * ecn-capable but not marked,
-			 * mark CE and update checksum
-			 */
-			otos = ip->ip_tos;
-			ip->ip_tos |= IPTOS_ECN_CE;
-			/*
-			 * update checksum (from RFC1624)
-			 *	   HC' = ~(~HC + ~m + m')
-			 */
-			sum = ~ntohs(ip->ip_sum) & 0xffff;
-			sum += (~otos & 0xffff) + ip->ip_tos;
-			sum = (sum >> 16) + (sum & 0xffff);
-			sum += (sum >> 16);  /* add carry */
-			ip->ip_sum = htons(~sum & 0xffff);
-			return (1);
-		}
-		break;
-#ifdef INET6
-	case 6:
-		if (flags & REDF_ECN6) {
-			struct ip6_hdr *ip6 = hdr;
-			u_int32_t flowlabel;
-
-			flowlabel = ntohl(ip6->ip6_flow);
-			if ((flowlabel >> 28) != 6)
-				return (0);	/* version mismatch! */
-			if ((flowlabel & (IPTOS_ECN_MASK << 20)) ==
-			    (IPTOS_ECN_NOTECT << 20))
-				return (0);	/* not-ECT */
-			if ((flowlabel & (IPTOS_ECN_MASK << 20)) ==
-			    (IPTOS_ECN_CE << 20))
-				return (1);	/* already marked */
-			/*
-			 * ecn-capable but not marked,  mark CE
-			 */
-			flowlabel |= (IPTOS_ECN_CE << 20);
-			ip6->ip6_flow = htonl(flowlabel);
-			return (1);
-		}
-		break;
-#endif  /* INET6 */
+		if (mp == NULL) {
+			if (ihash > mhash) fhead = 1;  
+		} else {
+			if (phash == ihash ||
+				(phash > ihash && phash < mhash) || 
+				(ihash > mhash && phash < mhash))
+				mc = mp;
+		}
+        } while(mi->m_nextpkt != m0 && mc == m);
+
+/* count host qlimit */
+	n = qlimit(q)/4;
+	/* no limit on small queue */
+	if (n < 200) n = qlimit(q);
+
+/* check host qlimit & drop */
+/* (do not allow queue to be overflowed by a sigle host) */
+        if (qpkts >= n) {
+		m_freem(m);
+		return (-1);
 	}
 
-	/* not marked */
+/* add/insert packet to queue */
+	if (mc == m)
+		_addq(q, m);                   /* put to tail */
+        else {
+		if (fhead != 0 && qpkts == 0)
+			_insq(q, m, NULL);     /* put to head */
+		else
+			_insq(q, m, mc);       /* insert to queue */
+	}
+
+#ifdef HPS_DEBUG
+	mi = qtail(q);
+	m0 = qtail(q)->m_nextpkt;
+
+	printf("queue: ");
+        do {
+                mi = mi->m_nextpkt;
+		printf("%x, ", pkt_hash(mi));
+	} while(mi->m_nextpkt != m0);	
+	printf("\n");
+#endif
+
 	return (0);
 }
 
@@ -510,86 +447,3 @@
 	return (m);
 }
 
-/*
- * helper routine to calibrate avg during idle.
- * pow_w(wtab, n) returns (1 - Wq)^n in fixed-point
- * here Wq = 1/weight and the code assumes Wq is close to zero.
- *
- * w_tab[n] holds ((1 - Wq)^(2^n)) in fixed-point.
- */
-static struct wtab *wtab_list = NULL;	/* pointer to wtab list */
-
-struct wtab *
-wtab_alloc(int weight)
-{
-	struct wtab	*w;
-	int		 i;
-
-	for (w = wtab_list; w != NULL; w = w->w_next)
-		if (w->w_weight == weight) {
-			w->w_refcount++;
-			return (w);
-		}
-
-	w = malloc(sizeof(struct wtab), M_DEVBUF, M_WAITOK|M_ZERO);
-	w->w_weight = weight;
-	w->w_refcount = 1;
-	w->w_next = wtab_list;
-	wtab_list = w;
-
-	/* initialize the weight table */
-	w->w_tab[0] = ((weight - 1) << FP_SHIFT) / weight;
-	for (i = 1; i < 32; i++) {
-		w->w_tab[i] = (w->w_tab[i-1] * w->w_tab[i-1]) >> FP_SHIFT;
-		if (w->w_tab[i] == 0 && w->w_param_max == 0)
-			w->w_param_max = 1 << i;
-	}
-
-	return (w);
-}
-
-int
-wtab_destroy(struct wtab *w)
-{
-	struct wtab	*prev;
-
-	if (--w->w_refcount > 0)
-		return (0);
-
-	if (wtab_list == w)
-		wtab_list = w->w_next;
-	else for (prev = wtab_list; prev->w_next != NULL; prev = prev->w_next)
-		if (prev->w_next == w) {
-			prev->w_next = w->w_next;
-			break;
-		}
-
-	free(w, M_DEVBUF);
-	return (0);
-}
-
-int32_t
-pow_w(struct wtab *w, int n)
-{
-	int	i, bit;
-	int32_t	val;
-
-	if (n >= w->w_param_max)
-		return (0);
-
-	val = 1 << FP_SHIFT;
-	if (n <= 0)
-		return (val);
-
-	bit = 1;
-	i = 0;
-	while (n) {
-		if (n & bit) {
-			val = (val * w->w_tab[i]) >> FP_SHIFT;
-			n &= ~bit;
-		}
-		i++;
-		bit <<=  1;
-	}
-	return (val);
-}
Index: altq/altq_red.h
===================================================================
RCS file: /cvs/src/sys/altq/altq_red.h,v
retrieving revision 1.5
diff -u -r1.5 altq_red.h
--- altq/altq_red.h	16 Dec 2002 17:27:20 -0000	1.5
+++ altq/altq_red.h	26 Jan 2010 08:03:18 -0000
@@ -113,11 +113,15 @@
 extern int		 red_addq(red_t *, class_queue_t *, struct mbuf *,
 			     struct altq_pktattr *);
 extern struct mbuf	*red_getq(red_t *, class_queue_t *);
-extern int		 drop_early(int, int, int);
-extern int		 mark_ecn(struct mbuf *, struct altq_pktattr *, int);
 extern struct wtab	*wtab_alloc(int);
 extern int		 wtab_destroy(struct wtab *);
 extern int32_t		 pow_w(struct wtab *, int);
+
+u_int                   hps_pkt_hash(struct mbuf *, struct altq_pktattr *, int);
+
+#if 0
+#define HPS_DEBUG
+#endif
 
 #endif /* _KERNEL */
 
Index: altq/altq_rmclass.c
===================================================================
RCS file: /cvs/src/sys/altq/altq_rmclass.c,v
retrieving revision 1.15
diff -u -r1.15 altq_rmclass.c
--- altq/altq_rmclass.c	8 May 2008 15:22:02 -0000	1.15
+++ altq/altq_rmclass.c	26 Jan 2010 08:03:19 -0000
@@ -1665,6 +1665,24 @@
 	qlen(q)++;
 }
 
+/* insert packet after pointed one, or on head if NULL*/
+void
+_insq(class_queue_t *q, struct mbuf *m, struct mbuf *memb)
+{
+                if (memb != NULL) {
+                        m->m_nextpkt = memb->m_nextpkt;
+                        memb->m_nextpkt = m;
+                        if (qtail(q) == memb) qtail(q) = m;    // relink new tail
+                } else {
+                        if (qtail(q) != NULL)
+                                m->m_nextpkt = qtail(q)->m_nextpkt;
+                        else
+                                qtail(q) = m;
+                        qtail(q)->m_nextpkt = m;
+                }
+                qlen(q)++;
+}
+
 mbuf_t *
 _getq(class_queue_t *q)
 {
Index: net/pf.c
===================================================================
RCS file: /cvs/src/sys/net/pf.c,v
retrieving revision 1.634
diff -u -r1.634 pf.c
--- net/pf.c	27 Feb 2009 12:37:45 -0000	1.634
+++ net/pf.c	26 Jan 2010 08:03:19 -0000
@@ -1742,7 +1742,7 @@
 		m->m_pkthdr.pf.rtableid = r->rtableid;
 
 #ifdef ALTQ
-	if (r != NULL && r->qid) {
+	if (r != NULL) {
 		m->m_pkthdr.pf.qid = r->qid;
 		/* add hints for ecn */
 		m->m_pkthdr.pf.hdr = mtod(m, struct ip *);
@@ -1866,11 +1866,9 @@
 		m0->m_pkthdr.pf.rtableid = r->rtableid;
 
 #ifdef ALTQ
-	if (r->qid) {
-		m0->m_pkthdr.pf.qid = r->qid;
-		/* add hints for ecn */
-		m0->m_pkthdr.pf.hdr = mtod(m0, struct ip *);
-	}
+	m0->m_pkthdr.pf.qid = r->qid;
+	/* add hints for ecn */
+	m0->m_pkthdr.pf.hdr = mtod(m0, struct ip *);
 #endif /* ALTQ */
 
 	switch (af) {
@@ -5275,7 +5273,7 @@
 		m->m_pkthdr.pf.statekey = s->key[PF_SK_STACK];
 
 #ifdef ALTQ
-	if (action == PF_PASS && r->qid) {
+	if (action == PF_PASS) {
 		if (pqid || (pd.tos & IPTOS_LOWDELAY))
 			m->m_pkthdr.pf.qid = r->pqid;
 		else
@@ -5659,7 +5657,7 @@
 		m->m_pkthdr.pf.statekey = s->key[PF_SK_STACK];
 
 #ifdef ALTQ
-	if (action == PF_PASS && r->qid) {
+	if (action == PF_PASS) {
 		if (pd.tos & IPTOS_LOWDELAY)
 			m->m_pkthdr.pf.qid = r->pqid;
 		else
