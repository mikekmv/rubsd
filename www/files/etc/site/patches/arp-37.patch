$RuOBSD$

--- arp.8.orig	Sat Oct  8 22:07:36 2005
+++ arp.8	Sat Oct  8 22:07:36 2005
@@ -132,7 +132,11 @@
 with the Ethernet address
 .Ar ether_addr .
 The Ethernet address is given as six hexadecimal bytes separated by
-colons.
+colons or as
+.Cm auto
+in which case all broadcast interfaces will be examined, and if one
+of them is found to occupy the same subnet, its Ethernet address
+will be used.
 .Pp
 The
 .Cm permanent , pub ,
--- arp.c.orig	Sat Oct  8 22:12:15 2005
+++ arp.c	Sat Oct  8 22:11:43 2005
@@ -64,6 +64,7 @@
 #include <netdb.h>
 #include <errno.h>
 #include <err.h>
+#include <ifaddrs.h>
 #include <nlist.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -82,6 +83,7 @@
 int file(char *);
 int get(const char *);
 int getinetaddr(const char *, struct in_addr *);
+struct ether_addr *get_ether_addr(in_addr_t);
 void getsocket(void);
 int rtmsg(int);
 int set(int, char **);
@@ -255,9 +257,16 @@
 	sin_m = blank_sin;		/* struct copy */
 	if (getinetaddr(host, &sin->sin_addr) == -1)
 		return (1);
-	ea = ether_aton(eaddr);
-	if (ea == NULL) 
-		errx(1, "invalid ethernet address: %s", eaddr);
+	if (strcmp(eaddr, "auto") == 0) {
+		if ((ea = get_ether_addr(sin->sin_addr.s_addr)) == NULL) {
+			printf("no interface found for %s\n",
+			    inet_ntoa(sin->sin_addr));
+			return (1);
+		}
+	} else {
+		if ((ea = ether_aton(eaddr)) == NULL)
+			errx(1, "invalid ethernet address: %s", eaddr);
+	}
 	memcpy(LLADDR(&sdl_m), ea, sizeof(*ea));
 	sdl_m.sdl_alen = 6;
 	doing_proxy = flags = export_only = expire_time = 0;
@@ -615,4 +624,39 @@
 	}
 	(void)memcpy(inap, hp->h_addr, sizeof(*inap));
 	return (0);
+}
+
+struct ether_addr *
+get_ether_addr(in_addr_t ipaddr)
+{
+	static struct ether_addr ea;
+	struct ifaddrs *ifa, *ifap;
+	struct sockaddr_dl *sdl;
+	in_addr_t addr, mask;
+
+	if (getifaddrs(&ifap) < 0)
+		err(1, "getifaddrs");
+
+	for (ifa = ifap; ifa != NULL; ifa = ifa->ifa_next) {
+		if ((ifa->ifa_flags & (IFF_UP | IFF_BROADCAST | IFF_NOARP)) !=
+		    (IFF_UP | IFF_BROADCAST))
+			continue;
+		if (ifa->ifa_addr->sa_family == AF_LINK &&
+		    (sdl = (struct sockaddr_dl *)ifa->ifa_addr) != NULL &&
+		    sdl->sdl_type == IFT_ETHER) {
+			bcopy(LLADDR(sdl), &ea, sizeof(ea));
+			continue;
+		}
+		if (ifa->ifa_addr->sa_family == AF_INET) {
+			addr = ((struct sockaddr_in *)
+			    ifa->ifa_addr)->sin_addr.s_addr;
+			mask = ((struct sockaddr_in *)
+			    ifa->ifa_netmask)->sin_addr.s_addr;
+			if ((addr & mask) == (ipaddr & mask))
+				break;
+		}
+	}
+
+	freeifaddrs(ifap);
+	return (ifa != NULL ? &ea : NULL);
 }
