# $RuOBSD: mk.conf,v 1.80 2009/01/13 08:10:44 form Exp $

# Настройки suexec
#
PATCH_SUEXEC?=		No		# Поменять DOCROOT для suexec
SUEXEC_DOCROOT?=	/home/www	# Корневой каталог серверов
SETUID_SUEXEC?=		No		# Устанавливать как setuid

# Настройки сборки sendmail
#
SENDMAIL_SASL?=		No		# Включить поддержку SASL2

# Настройки libpthread (требует ядра с option RTHREADS)
#
USE_RTHREADS?=		No		# Использовать librthread в качестве
#					# libpthread

# Другие хреновины
#
LIBS_NODEBUG?=		No		# Запретить сборку либ с отладочными
#					# символами
PATCH_MOUNT?=		Yes		# Укоротить кое-какие надписи mount
PATCH_MODLOAD?=		No		# Использовать /dev/ksyms в modload
#					# (не требуется для OpenBSD > 4.2)
PATCH_TOP?=		Yes		# Добавить в top печать uptime
PATCH_ARP?=		Yes		# Поддержка auto ether_addr в arp
PATCH_PAX?=		No		# Научить tar & pax использовать bzip2
#					# (не требуется для OpenBSD > 4.3)
PATCH_FTPD?=		Yes		# Запретить LIST -R в ftpd
PATCH_IFCONFIG?=	Yes		# Убрать ошибки [-]carpdemote для
#					# не-GENERIC ядер.
PATCH_BIOCTL?=		No		# Добавить функционал -P passfile
#					# в bioctl (НЕ РЕКОМЕНДУЕТСЯ включать
#					# без точного понимания зачем это
#					# может пригодиться ;)
PAX_PATCH?=		pax.patch	# Для OpenBSD < 4.1 заменить на
#					# pax-40.patch
TOP_PATCH?=		top.patch	# Для OpenBSD < 4.2 заменить на
#					# top-41.patch, для OpenBSD 4.2 на
#					# top-42.patch

#
# IRC сервер по умолчанию для ircII и BitchX
#
IRC_SERVER?=		irc.openbsd.ru

# Качать distfiles для портов сначала отсюда
#
#.if defined(DIST_SUBDIR) && ${DIST_SUBDIR} != ""
#MASTER_SITE_OVERRIDE?=	ftp://pdp-11.org.ru/pub/OpenBSD/distfiles/${DIST_SUBDIR}/ \
#			ftp://ftp.chg.ru/pub/FreeBSD/distfiles/${DIST_SUBDIR}/ \
#			ftp://ftp.chg.ru/pub/FreeBSD/distfiles/
#.else
#MASTER_SITE_OVERRIDE?=	ftp://pdp-11.org.ru/pub/OpenBSD/distfiles/ \
#			ftp://ftp.chg.ru/pub/FreeBSD/distfiles/
#.endif

# Proxy сервер, используемый при скачивании файлов для портов
#
#FETCH_CMD?=		env http_proxy=http://proxy.some.domain:3128 \
#			ftp_proxy=http://proxy.some.domain:3128 \
#			/usr/bin/ftp -Vmk ${FTP_KEEPALIVE}

# Из-за кривости bsd.port.mk проверяем таргет...
#
.if make(clean)
CLEANDEPENDS?=		No		# Чистить зависимые порты по make clean
.endif

#SUDO?=			/usr/bin/sudo	# sudo (для make build)

SITEDIR?=		/etc/site	# Где все это лежит
BSDSRCDIR?=		/usr/src	# Где находится src
BSDOBJDIR?=		/usr/obj	# Где находится obj
PORTSDIR?=		/usr/ports	# Где находится ports
#WRKOBJDIR?=		/usr/obj/ports	# Рабочий каталог для сборки портов
XSRCDIR?=		/usr/xenocara	# Где находится xenocara
XOBJDIR?=		/usr/xobj	# Рабочий каталог для сборки X

# Научка GQmpeg конвертировать windows-1251 заголовки в koi8-r
#
.if ${.CURDIR} == ${PORTSDIR}/audio/gqmpeg
CONFIGURE_ARGS+=	--enable-russian
.endif

# Патч перекодировки тагов в mpg123 (из cp1251 в koi8-r)
#
.if ${.CURDIR} == ${PORTSDIR}/audio/mpg123
MODULES=	converters/libiconv
pre-build:
	@${ECHO_MSG} "===>  Applying tag conversion patch"
	@cd ${WRKSRC} && ${PATCH} -sp0 < ${SITEDIR}/patches/mpg123-iconv.patch
.endif

# Установка IRC сервера по умолчанию для BitchX и IrcII на irc.openbsd.ru
#
.if ${.CURDIR} == ${PORTSDIR}/net/ircII || ${.CURDIR} == ${PORTSDIR}/net/bitchx
.ifdef IRC_SERVER
CONFIGURE_ARGS+=	--with-default-server=${IRC_SERVER}
.else
CONFIGURE_ARGS+=	--with-default-server=irc.openbsd.ru
.endif
.endif

# Научка ipfm запускать несколько копий и создавать pidfile в виде
# /var/run/ipfm-<interface>.pid
#
.if ${.CURDIR} == ${PORTSDIR}/net/ipfm
post-patch:
	@${ECHO_MSG} "===>  Applying IPFM multiply interfaces patch"
	@${PATCH} ${PATCH_ARGS} < ${SITEDIR}/patches/ipfm.patch
.endif

# Отучка courier-imap писать IPv4->IPv6 mapped адреса в логе (и от IPv6 :)
#
.if ${.CURDIR} == ${PORTSDIR}/mail/courier-imap
CONFIGURE_ARGS+=	--without-ipv6
.endif

# Улучшение SPAM-protect feature в hypermail
#
.if ${.CURDIR} == ${PORTSDIR}/mail/hypermail
post-patch:
	@${ECHO_MSG} "===>  Applying SPAM-protect patch"
	@cd ${WRKDIST} && ${PATCH} -sp0 < ${SITEDIR}/patches/hypermail.patch
.endif

# Запись IP адреса PPTP клиента в env PPTP_CLIENT для poptop.
#
.if ${.CURDIR} == ${PORTSDIR}/net/poptop
post-patch:
	@${ECHO_MSG} "===>  Applying PPTP_CLIENT env patch"
	@cd ${WRKDIST} && ${PATCH} -sp0 < ${SITEDIR}/patches/poptop.patch
.endif

# Запретить нахрен использовать TCP WRPPERS в clamav. Для clamd это нафиг
# не нужно, а в clamav-milter сильно мешает нормальной работе и опять-таки
# не нужно так как sendmail уже поддерживает TCP WRAPPERS.
#
.if ${.CURDIR} == ${PORTSDIR}/security/clamav
CONFIGURE_ARGS+=	--without-tcpwrappers
.endif

# Небольшие фиксы для birda которые grange лениво коммитнуть в порт ;)
#
.if ${.CURDIR} == ${PORTSDIR}/comms/birda
post-patch:
	@${ECHO_MSG} "===>  Applying more patches"
	@cd ${WRKDIST} && ${PATCH} -sp0 < ${SITEDIR}/patches/birda.patch
.endif

# Убрать нахрен дурацкие autoindent, smarthome, smartback, которые
# только мешают. Убрать определения языка joe (трансляции для которого
# все-равно недоделаны) по LC_CTYPE. Оставить по LC_ALL и LANG. Привести
# в порядок настройки по умолчанию.
#
.if ${.CURDIR} == ${PORTSDIR}/editors/joe
post-patch:
	@${ECHO_MSG} "===>  Applying SITE patches"
	@cd ${WRKDIST}/rc && mv -f ftyperc ftyperc.old && \
	    egrep -v '(autoi|smart)' ftyperc.old > ftyperc
	@cd ${WRKDIST} && ${PATCH} -sp0 < ${SITEDIR}/patches/joe.patch
.endif

# Сделать нормальную иконку 16x16 для mozilla-thunderbird
#
.if ${.CURDIR} == ${PORTSDIR}/mail/mozilla-thunderbird
post-patch:
	@${ECHO_MSG} "===>  Applying SITE patches"
	@cd ${WRKDIST} && ${PATCH} -sp0 < ${SITEDIR}/patches/thunderbird.patch
.endif

# Добавить поддержку цветной ASCII графики :)
#
.if ${.CURDIR} == ${PORTSDIR}/x11/mplayer
FLAVORS+=		caca

.if defined(FLAVOR) && ${FLAVOR:L:Mcaca}
CONFIGURE_ARGS:=	${CONFIGURE_ARGS:S/--disable-caca/--enable-caca/}
LIB_DEPENDS+=		caca::graphics/libcaca
.endif
.endif

# Добавить поддержку KOI8-R и no_python pseudo-flavor в rrdtool
#
.if ${.CURDIR} == ${PORTSDIR}/net/rrdtool
PSEUDO_FLAVORS=		no_python
MODULES=		converters/libiconv
CPPFLAGS+=		-I${LOCALBASE}/include

.if defined(FLAVOR) && ${FLAVOR:Mno_python}
MULTI_PACKAGES:=	${MULTI_PACKAGES:S/-python//}
CONFIGURE_ARGS:=	${CONFIGURE_ARGS:S/--enable-python/--disable-python/}
.endif

post-patch:
	@${ECHO_MSG} "===>  Applying SITE patches"
	@cd ${WRKDIST} && patch -sp0 < ${SITEDIR}/patches/rrd-cyr.patch
.endif

# Добавляем поддержку не-chroot apache в nut-cgi
#
.if ${.CURDIR} == ${PORTSDIR}/sysutils/nut
post-patch:
	@${ECHO_MSG} "===>  Applying SITE patches"
	@cd ${WRKDIST} && patch -sp0 < ${SITEDIR}/patches/nut-cgi.patch
.endif

# Убираем нахрен newuser скрипт из zsh
#
.if ${.CURDIR} == ${PORTSDIR}/shells/zsh
post-patch:
	@${ECHO_MSG} "===>  Applying SITE patches"
	@cd ${WRKDIST} && patch -sp0 < ${SITEDIR}/patches/zsh.patch
.endif

# Возвращаем назад поддержку oss для xmms так как sndio плугин совершенно
# непригоден для использования.
#
.if ${.CURDIR} == ${PORTSDIR}/audio/xmms
CONFIGURE_ARGS:=	${CONFIGURE_ARGS:S/--disable-oss/--enable-oss/}

.if !make(show) && !make(print-package-signature) && \
    !make(print-plist-contents)
PLIST-main=		${WRKBUILD}/PLIST-main
.endif

post-build:
	@${ECHO_MSG} "===>  Enabling OSS support"
	@perl -pe 's|\@comment (lib/xmms/Output/libsun.*)|$$1|' \
	    < ${PKGDIR}/PLIST-main > ${WRKBUILD}/PLIST-main
.endif

# Разборки с suexec
#
.if ${.CURDIR} == ${BSDSRCDIR}/usr.sbin/httpd && defined(PATCH_SUEXEC) \
    && ${PATCH_SUEXEC:U} == YES && ${.CURDIR} != ${.OBJDIR}
prereq:	${.OBJDIR}/config.status
	@echo "Patching suexec..."
	@sh ${SITEDIR}/patches/suexec.sh ${SUEXEC_DOCROOT}
.NOTPARALLEL: prereq
.endif

.if ${.CURDIR} == ${BSDSRCDIR}/usr.sbin && defined(SETUID_SUEXEC) && \
    ${SETUID_SUEXEC:U} == YES
afterinstall:
	@chmod u+s ${DESTDIR}/usr/sbin/suexec

.NOTPARALLEL: afterinstall
.endif

# Разборки с sendmail
#
.if ${.CURDIR} == ${BSDSRCDIR}/gnu/usr.sbin/sendmail/sendmail && \
    exists(/usr/local/include/sasl/sasl.h) && \
    defined(SENDMAIL_SASL) && ${SENDMAIL_SASL:U} == YES
ENVDEF+=		-DSASL -I/usr/local/include/sasl
LDADD+=			-L/usr/local/lib -lsasl2
.endif

# Разборки с mount
#
.if ${.CURDIR} == ${BSDSRCDIR}/sbin/mount && defined(PATCH_MOUNT) && \
    ${PATCH_MOUNT:U} == YES && ${.CURDIR} != ${.OBJDIR}
CFLAGS+=		-I${.CURDIR}
CLEANFILES+=		mount.c mount.c.orig

beforedepend: mount.c.orig

mount.c.orig:
.if !defined(SITE_REENTER)
	@echo "Patching mount..." && \
	    cp ${.CURDIR}/mount.c ${.OBJDIR} && cd ${.OBJDIR} && \
	    patch -sp0 < ${SITEDIR}/patches/mount.patch && \
	    cd ${.CURDIR} && ${MAKE} depend SITE_REENTER=Yes
.endif

.NOTPARALLEL: beforedepend
.endif

# Разборки с modload
#
.if ${.CURDIR} == ${BSDSRCDIR}/sbin/modload && defined(PATCH_MODLOAD) && \
    ${PATCH_MODLOAD:U} == YES && ${.CURDIR} != ${.OBJDIR}

CFLAGS+=		-I${.CURDIR}
CLEANFILES+=		modload.8 modload.8.orig modload.c modload.c.orig

beforedepend: modload.8.orig modload.c.orig

modload.8.orig modload.c.orig:
.if !defined(SITE_REENTER)
	@echo "Patching modload..." && \
	    cp ${.CURDIR}/modload.8 ${.CURDIR}/modload.c ${.OBJDIR} && \
	    cd ${.OBJDIR} && patch -sp0 < ${SITEDIR}/patches/modload.patch && \
	    cd ${.CURDIR} && ${MAKE} depend SITE_REENTER=Yes
.endif

.NOTPARALLEL: beforedepend
.endif

# Разборки с top
#
.if ${.CURDIR} == ${BSDSRCDIR}/usr.bin/top && defined(PATCH_TOP) && \
    ${PATCH_TOP:U} == YES && ${.CURDIR} != ${.OBJDIR}

CFLAGS+=		-I${.CURDIR}
CLEANFILES+=		display.c display.c.orig display.h display.h.orig \
			machine.c machine.c.orig machine.h machine.h.orig \
			top.c top.c.orig

beforedepend: display.c.orig display.h.orig machine.c.orig machine.h.orig \
	top.c.orig

display.c.orig display.h.orig machine.c.orig machine.h.orig top.c.orig:
.if !defined(SITE_REENTER)
	@echo "Patching top..." && \
	    cd ${.CURDIR} && \
	    cp display.c display.h machine.c machine.h top.c ${.OBJDIR} && \
	    cd ${.OBJDIR} && patch -sp0 < ${SITEDIR}/patches/${TOP_PATCH} && \
	    cd ${.CURDIR} && ${MAKE} depend SITE_REENTER=Yes
.endif

.NOTPARALLEL: beforedepend
.endif

# Разборки с arp
#
.if ${.CURDIR} == ${BSDSRCDIR}/usr.sbin/arp && defined(PATCH_ARP) && \
    ${PATCH_ARP:U} == YES && ${.CURDIR} != ${.OBJDIR}

CFLAGS+=		-I${.CURDIR}
CLEANFILES+=		arp.8 arp.c arp.8.orig arp.c.orig

beforedepend: arp.8.orig arp.c.orig

arp.8.orig arp.c.orig:
.if !defined(SITE_REENTER)
	@echo "Patching arp..." && \
	    cd ${.CURDIR} && cp arp.8 arp.c ${.OBJDIR} && \
	    cd ${.OBJDIR} && patch -sp0 < ${SITEDIR}/patches/arp.patch && \
	    cd ${.CURDIR} && ${MAKE} depend SITE_REENTER=Yes
.endif

.NOTPARALLEL: beforedepend
.endif

# Разборки с pax
#
.if ${.CURDIR} == ${BSDSRCDIR}/bin/pax && defined(PATCH_PAX) && \
    ${PATCH_PAX:U} == YES && ${.CURDIR} != ${.OBJDIR}

CFLAGS+=		-I${.CURDIR}
CLEANFILES+=		options.c options.c.orig pax.1 pax.1.orig \
			tar.1 tar.1.orig

beforedepend: options.c.orig pax.1.orig tar.1.orig

options.c.orig pax.1.orig tar.1.orig:
.if !defined(SITE_REENTER)
	@echo "Patching pax..." && \
	    cd ${.CURDIR} && cp options.c pax.1 tar.1 ${.OBJDIR} && \
	    cd ${.OBJDIR} && patch -sp0 < ${SITEDIR}/patches/${PAX_PATCH} && \
	    cd ${.CURDIR} && ${MAKE} depend SITE_REENTER=Yes
.endif

.NOTPARALLEL: beforedepend
.endif

# Разборки с ftpd
#
.if ${.CURDIR} == ${BSDSRCDIR}/libexec/ftpd && defined(PATCH_FTPD) && \
    ${PATCH_FTPD:U} == YES && ${.CURDIR} != ${.OBJDIR}
CLEANFILES+=		popen.c popen.c.orig

beforedepend: popen.c.orig

popen.c.orig:
.if !defined(SITE_REENTER)
	@echo "Patching ftpd..." && \
	    cd ${.OBJDIR} && cp ${.CURDIR}/popen.c . && \
	    patch -sp0 < ${SITEDIR}/patches/ftpd-ls.patch && \
	    cd ${.CURDIR} && ${MAKE} depend SITE_REENTER=Yes
.endif

.NOTPARALLEL: beforedepend
.endif

# Разборки с ifconfig
#
.if ${.CURDIR} == ${BSDSRCDIR}/sbin/ifconfig && defined(PATCH_IFCONFIG) && \
    ${PATCH_IFCONFIG:U} == YES && ${.CURDIR} != ${.OBJDIR}

CLEANFILES+=		ifconfig.c ifconfig.c.orig

beforedepend: ifconfig.c.orig

ifconfig.c.orig:
.if !defined(SITE_REENTER)
	@echo "Patching ifconfig..." && \
	    cd ${.CURDIR} && cp ifconfig.c ${.OBJDIR} && \
	    cd ${.OBJDIR} && \
	    patch -sp0 < ${SITEDIR}/patches/ifconfig.patch && \
	    cd ${.CURDIR} && ${MAKE} depend SITE_REENTER=Yes
.endif

.NOTPARALLEL: beforedepend
.endif

# Разборки с bioctl
#
.if ${.CURDIR} == ${BSDSRCDIR}/sbin/bioctl && defined(PATCH_BIOCTL) && \
    ${PATCH_BIOCTL:U} == YES && ${.CURDIR} != ${.OBJDIR}  
CLEANFILES+=		bioctl.c bioctl.c.orig

CPPFLAGS+=		-I${.CURDIR}

beforedepend:		bioctl.c.orig

bioctl.c.orig:
.if !defined(SITE_REENTER)
	@echo "Patching bioctl..." && \
	    cd ${.CURDIR} && cp bioctl.c ${.OBJDIR} && cd ${.OBJDIR} && \
	    patch -sp0 < ${SITEDIR}/patches/bioctl.patch && \
	    cd ${.CURDIR} && ${MAKE} depend SITE_REENTER=Yes
.endif

.NOTPARALLEL: beforedepend
.endif

# Разборки с lib[pr]thread
#
.if defined(USE_RTHREADS) && ${USE_RTHREADS:U} == YES
.if ${.CURDIR} == ${BSDSRCDIR}/lib
SKIPDIR+=		libpthread
SUBDIR+=		librthread
.endif

.if ${.CURDIR} == ${BSDSRCDIR}/lib/librthread 
.include "${BSDSRCDIR}/lib/libpthread/shlib_version"

PMAJOR:=		${major}
PMINOR:=		${minor}

.include "${.CURDIR}/shlib_version"

afterinstall:
	ln -f ${DESTDIR}${LIBDIR}/librthread.a ${DESTDIR}${LIBDIR}/libpthread.a
.if !defined(NOPROFILE)
	ln -f ${DESTDIR}${LIBDIR}/librthread_p.a \
	    ${DESTDIR}${LIBDIR}/libpthread_p.a
.endif
.if !defined(NOPIC)
	ln -f ${DESTDIR}${LIBDIR}/librthread_pic.a \
	    ${DESTDIR}${LIBDIR}/libpthread_pic.a
	ln -f ${DESTDIR}${LIBDIR}/librthread.so.${SHLIB_MAJOR}.${SHLIB_MINOR} \
	    ${DESTDIR}${LIBDIR}/libpthread.so.${PMAJOR}.${PMINOR}
.endif
.endif

.NOTPARALLEL: afterinstall
.endif

# Разборки с либами и отладочными символами
#
.if defined(LIBS_NODEBUG) && ${LIBS_NODEBUG:U} == YES && defined(LIB)
DEBUG=
.endif
