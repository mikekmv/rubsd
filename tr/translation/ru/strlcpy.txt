
		strlcpy и strlcat -- совместимое, безопасное
			копирование и конкатенация строк.

							Todd C. Millert
					University of Colorado, Boulder

							  Theo de Raadt
							OpenBSD Project

Краткий Обзор

  С увеличением атак на переполнение буфера, все больше и больше программистов
переходит к использованию функций, таких как strncpy() и strncat() ограничива-
ющих размер или длину строки. Наряду с общей тенденцией, стандартные C функции
начинают использоваться  там, для чего  они не были разработаны. В этой статье
описывается альтернативный и  совместимый API  разработанный  для  безопасного
копирования строк.

  Может  возникнуть несколько  проблем при использовании strncpy() и strncat()
как  безопасной  замены  strcpy() и strcat(). Обе функции  работают с заканчи-
вающимеся на NUL строками и с параметром  длины строки, которые могут запутать
даже опытных программистов. Они также не  предоставляют  никаких  возможностей
определить  когда  происходит  усечение  строки.  Наконец, strncpy() заполняет
нулями оставшуюся часть строки назначения, что влияет на ее производительность.
Когда мы проводили аудит исходных текстов OpenBSD, в большинстве случаев обна-
ружили  неправильное использование  strncpy()  и strncat().  Не все эти случаи
приводили  к  переполнению буфера, но  дали нам  понять, что  правила использ-
ованияa  strncpy() и  strncat(), как  функций  для   безопасного  оперирования
строками,  обычно  понимаются  неправильно.  Предлагаемые  на  замену функции,
strlcpy() и strlcat(), лишены этих недостатков, предоставляя API для безопасн-
ого копирования строк (см. Прототип функций). Обе функции  гарантируют заверш-
ение строки NUL'ом, определяя ее  размер параметром длины в байтах, и продост-
авляя простой путь для определения усечения строки. Функции также не заполняют
неиспользуемые байты в строке назначения.


Прототип функций

size_t strlcpy(char *dst, const char *src, size_t size);
size_t strlcat(char *dst, const char *src, size_t size);

$RuOBSD: strlcpy.txt,v 1.1 2001/10/02 12:00:37 dfa Exp $
