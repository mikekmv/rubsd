
		strlcpy и strlcat -- совместимое, безопасное
			копирование и конкатенация строк.

							Todd C. Millert
					University of Colorado, Boulder

							  Theo de Raadt
							OpenBSD Project

Краткий Обзор

  С увеличением атак на переполнение буфера, все больше и больше программистов
переходит  к  использованию   функций,   таких  как  strncpy()   и   strncat()
ограничивающих размер или длину строки. Наряду с общей тенденцией, стандартные
C функции  начинают использоваться  там, для чего  они не были  разработаны. В
этой статье описывается альтернативный  и  совместимый API  разработанный  для
безопасного копирования строк.

  Может  возникнуть несколько  проблем при использовании strncpy() и strncat()
как безопасной замены strcpy() и strcat().  Функции работают с оканчивающимися
на NUL строками и параметром длины строки, которые могут запутать даже опытных
программистов.  Они  также не  предоставляют  никаких  возможностей определить
когда   происходит  усечение  строки.   Наконец,  strncpy()  заполняет  нулями
оставшуюся часть строки назначения, что влияет на её производительность. Когда
мы проводили  аудит исходных текстов OpenBSD, в большинстве случаев обнаружили
неправильное использование  функций strncpy()  и strncat().  Не все эти случаи
приводили к переполнению буфера, но дали нам понять, что правила использования
strncpy() и  strncat(), как  функций  для  безопасного  оперирования строками,
обычно  понимаются  неправильно.  Предлагаемые  на замену функции, strlcpy() и
strlcat(),   лишены   этих  недостатков,  предоставляя  API  для   безопасного
копирования строк (см. Прототип функций).  Обе функции  гарантируют завершение
строки NUL'ом,  определяя её  размер параметром длины в байтах, и предоставляя
простой  путь для  определения усечения  строки.  Функции  также не  заполняют
NUL'ом неиспользуемые байты в строке назначения.


Предисловие

  В середине 1996, авторы с другими членами проекта OpenBSD,  взялись за аудит
исходных  текстов  OpenBSD.  Атаки на  переполнение  буфера  получили  большое
распространение на форумах  подобных BugTraq.   Мы  нашли  большое  количество
переполнений буфера из-за копирования  безграничных строк используя sprintf(),
strcpy() и strcat(), а так же  циклов манипулирующих со строками  без проверки
на их размер. Кроме того, мы нашли случаи, где программист пытался обезопасить
манипуляции со строками  используя strncpy() и strncat(), но не понял тонкости
программного интерфейса приложения.

  Таким образом,  мы обнаружили, что при аудите кода, нам необходимо проверять
не  только  на  опасное  использование  функций  strcpy() и strcat(), но  и на
неправильное  использование   функций  strncpy()  и  strncat().   Проверка  на
правильное  использование  не  всегда  очевидна, особенно в случае статических
переменных  или  буферов  выделенных используя  calloc().  Мы пришли к выводу,
что необходима замена strncpy() и strncat(), которая смогла бы быть защищённой
от неумелого обращения,  главным образом для облегчения работы программиста, а
так же, для упрощения аудита исходного кода.


Прототип функций

size_t strlcpy(char *dst, const char *src, size_t size);
size_t strlcat(char *dst, const char *src, size_t size);

$RuOBSD: strlcpy.txt,v 1.2 2001/10/02 12:11:18 dfa Exp $
